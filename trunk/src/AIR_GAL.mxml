<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/halo" width="800" height="600" showStatusBar="false" click="windowedapplication1_clickHandler(event)" creationComplete="windowedapplication1_creationCompleteHandler(event)" initialize="windowedapplication1_initializeHandler(event)" applicationComplete="windowedapplication1_applicationCompleteHandler(event)" preinitialize="windowedapplication1_preinitializeHandler(event)" xmlns:mx1="library://ns.adobe.com/flex/mx">
	<fx:Style source="font.css"/>
	<fx:Script>
		<![CDATA[
			import AGE.UI.control.ClickGifShower;
			import AGE.UI.control.Role;
			import AGE.UI.management.UImanagement;
			import AGE.evaluator.*;
			import AGE.event.*;
			import AGE.io.XMLReader;
			import AGE.music.MusicPlayer;
			import AGE.text.TypeWriter;
			
			import mx.controls.Alert;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			import mx.events.MenuEvent;
			import mx.rpc.xml.SimpleXMLDecoder;
			
			import spark.components.RichText;
			
 			
			public var actionId:int=0;
			
			protected var UI_URL:String="UI.xml";
			protected var Script_URL:String = "Script.xml";
//			protected var Script_URL:String = "test.xml";
			protected var Variable_URL:String="VariableTable.xml";
			protected var musicPlayer:MusicPlayer=new MusicPlayer();
			protected var mainText:RichText;
			protected var clickGifShower:ClickGifShower;
			protected var RoleList:ArrayCollection=new ArrayCollection();
			protected var variableTable:ArrayCollection=new ArrayCollection();//变量表
			protected var interruptActionPool:ArrayCollection=new ArrayCollection();
			protected var interruptActionID:int=0;
			
			protected function myMenuBar_itemClickHandler(event:MenuEvent):void
			{
				if(event.label=="关于…"){
					Alert.show("AIR_GAL_Engine ver0.1","关于");
				}
				if(event.label=="全屏"){
					stage.displayState = StageDisplayState.FULL_SCREEN;
				}
				if(event.label=="窗口"){
					stage.displayState = StageDisplayState.NORMAL;
				}
			}

			protected function windowedapplication1_clickHandler(event:MouseEvent):void
			{
				clickGifShower.visible=false;
				if(!TypeWriter.isTypeing){
					if(interruptActionPool.length==0){
						doAction();
					} else {
						interruptDoAction();
					}
				} else {
					TypeWriter.update();
				}
			}

			protected function windowedapplication1_rightClickHandler(event:MouseEvent):void{
				Alert.show("111111","11");
			}
			
			protected function windowedapplication1_creationCompleteHandler(event:FlexEvent):void
			{
				this.addEventListener(MouseEvent.RIGHT_CLICK,windowedapplication1_rightClickHandler);
			}
			/**
			 * 主脚本动作流执行器
			 */
			protected function doAction():void{
				var isStop:Boolean=false
				try{
					while(!isStop){
						isStop=action(actionPool.getItemAt(actionId));
						actionId++;
					}
				} catch (e:RangeError){
					this.stage.nativeWindow.close();
				} 
			}
		   /**  
			* 根据脚本xml读取出的action做出相应动作
			* @param action 单个action实体
			* @return 是否暂停脚本动作流 true为暂停
			*/
			private function action(action:Object):Boolean{
				switch(action.type){
					case "pause":
						return true;
					case "bg_change":
						backgroud.visible=false;
						backgroud.source=action.src;
						backgroud.visible=true;
						break;
					case "role_change":
						var role:Role;
						for(var i:int=0;i<=RoleList.length-1;i++){
							role=RoleList.getItemAt(i) as Role;
							if(role.position==action.position){
								if(action.src!=""){
									fadeOut.play([role]);
									role.source=action.src;
									fadeIn.play([role]);
								} else {
									fadeOut.play([role]);
								}
								
								break;
							}
						}
						break;
					case "bgm_start":
						musicPlayer.bgmPlay(action.src);
						break;
					case "text":
						clickGifShower.visible=false;
						TypeWriter.type(action.value+"\n",30);
						return true;
						break;
					case "page_turning":
						mainText.text="";
						break;
					case "script_end":
						this.stage.nativeWindow.close();
						return true;
						break;
					case "evaluate":
						for(var j:int=0;j<=variableTable.length-1;i++){
							if(variableTable.getItemAt(j).key==action.key){
								var exp:String=VariableExchanger.exchange(action.value);
								if(CheckEvaluator.check(exp)){
									variableTable.getItemAt(j).value=eval(exp);
								}
								
								break;
							}
						}
						break;
					case "if":
						var exp:String=action.test;
						exp=VariableExchanger.exchange(exp);
						var result:Boolean;
						if(CheckEvaluator.check(exp)){
							result=eval(exp);
						}
						if(result){
							interruptActionPool=action.ramus.getItemAt(0).action;
							interruptDoAction();
							return true;
						} else {
							interruptActionPool=action.ramus.getItemAt(1).action;
							interruptDoAction();
							return true;
						}
						break;
					case "return":
						interruptActionPool=new ArrayCollection();
						interruptActionID=0;
						doAction();
						return false;							
				}
				return false;
			}
			/**
			 * 中断脚本动作流执行器
			 */			
			protected function interruptDoAction():void{
				var isStop:Boolean=false
				try{
					while(!isStop){
						isStop=action(interruptActionPool.getItemAt(interruptActionID));
						interruptActionID++;
					}
				} catch (e:RangeError){
					interruptActionPool=new ArrayCollection();
					interruptActionID=0;
					doAction();
					return;	
				} 
				
			}
			
			protected function eval(exp:String){
				return Evaluator.htmlLoader.window.evalExp(exp);
			}
						
			protected function windowedapplication1_initializeHandler(event:FlexEvent):void
			{
				TypeWriter.main=this as spark.components.WindowedApplication;
				//读取UI配置文件然后设置
				var UI_Object:Object=XMLReader.read(UI_URL);
				var UIkeeper:UImanagement=new UImanagement(this as spark.components.WindowedApplication);
				UIkeeper.buildUI(UI_Object.UI.control);
				//读取用户变量表格然后设置
				var var_Object:Object=XMLReader.read(Variable_URL);
				variableTable=var_Object.VariableTable.variable;
				VariableExchanger.variableTable=variableTable;
				//读取脚本设置
				var Sprict_Object:Object=XMLReader.read(Script_URL);
				actionPool=Sprict_Object.Script.action;
			}


			protected function windowedapplication1_applicationCompleteHandler(event:FlexEvent):void
			{
				doAction();
			}


			protected function windowedapplication1_preinitializeHandler(event:FlexEvent):void
			{
				this.addEventListener(SetMainTextBoxEvent.SETMAINTEXTBOX,app_setMainTextBoxHandler);
				this.addEventListener(AddControlEvent.ADDTEXTBOX,app_addControlHandler);
				this.addEventListener(TypeWriterDestoryTimerEvent.DESTORYTIMER,app_TypeEndHandler);

			}
			
			protected function app_setMainTextBoxHandler(event:SetMainTextBoxEvent):void{
				mainText=event.mainTextBox.text;
				TypeWriter.inTextField=mainText;
			}
			
			protected function app_addControlHandler(event:AddControlEvent):void{
				this.addElement(event.control as IVisualElement);
				if(getQualifiedClassName(event.control)=="AGE.UI.control::ClickGifShower"){
					(event.control as ClickGifShower).show();
					clickGifShower=event.control as ClickGifShower;
					clickGifShower.visible=false;
				}
				if(getQualifiedClassName(event.control)=="AGE.UI.control::Role"){
					RoleList.addItem(event.control);
				}
			}

			protected function app_TypeEndHandler(event:Event):void{
				clickGifShower.visible=true;
			}
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:ArrayCollection id="actionPool" />
	    <s:Fade id="fadeOut" duration="1000" alphaFrom="1.0" alphaTo="0.0"/>
	    <s:Fade id="fadeIn" duration="1000" alphaFrom="0.0" alphaTo="1.0"/>
	</fx:Declarations>
	<mx1:Image id="backgroud" x="0" y="0" width="100%" height="100%" maintainAspectRatio="false" scaleContent="true" hideEffect="{fadeOut}" showEffect="{fadeIn}" visible="false"/>
	<mx1:HTML id="Evaluator" location="Evaluator.html" visible="false" />
    <!-- <mx:MenuBar id="myMenuBar" labelField="@label" 
                 left="0" top="0" right="0" tabEnabled="false" alpha="0.6"
                itemClick="myMenuBar_itemClickHandler(event)">
         <fx:XMLList>
            <menuitem label="开始" />
            <menuitem label="输出" >
                 <menuitem label="全屏"/>
                 <menuitem label="窗口"/>
            </menuitem>
            <menuitem label="帮助" >
                 <menuitem id="about" label="关于…"/>
            </menuitem>
        </fx:XMLList>
     </mx:MenuBar> 
    <mx:Image id="textbox" x="0" y="{this.height-textbox.height}" source="image/textbox.png" maintainAspectRatio="false" width="100%" alpha="0.9"/>	
    <mx:Text id="text"  x="2" y="{textbox.y}" width="100%"/>-->

</s:WindowedApplication>
